
set dotenv-load

list:
    just -l


db-destroy:
    rails db:drop db:create db:migrate

# runs in dev, using ENV variable for DB.
run:
    echo Make sure you set up DATABASE_URL_DEV in .env...
    DATABASE_URL=$DATABASE_URL_DEV bin/dev

dev: run

rails-c:
    DATABASE_URL=$DATABASE_URL_DEV rails c
rails-c-prod:
    DATABASE_URL=$DATABASE_URL_PROD RAILS_ENV=production rails c

prod-setup:
    # DATABASE_URL=$DATABASE_URL_PROD RAILS_ENV=production rails db:setup
    DATABASE_URL=$DATABASE_URL_PROD RAILS_ENV=production rails db:migrate
    ./bin/rails assets:precompile

# Looks like LOCAL_PROD=true helps
# [PROD] runs rails in prod
run-prod:
    # RAILS_ENV=production rails db:create

    #SECRET_KEY_BASE_DUMMY=1
    #./bin/rails assets:precompile
    LOCAL_PROD=true \
    DATABASE_URL=$DATABASE_URL_PROD \
    PORT=8080 \
    RAILS_ENV=production \
    bin/docker-entrypoint rails s
    # -->  http://127.0.0.1:8080 (wont work with HTTPS)
    # =>   http://localhost:8080/ (also works)

# PostgreSQL: show local DBs
db-show-local-databases:
    @echo 1. Show DBs in localhost
    psql -l

    @echo 2. Show DBs as rubyllm_chat_app
    @yellow 'üêò psql -U rubyllm_chat_app -l'

    @echo 3. Connect to DEV DB:
    @yellow 'üêò psql -d rubyllm_chat_app_development'

    @echo 4. Connect to PROD DB:
    @yellow 'üêò psql -U rubyllm_chat_app -d rubyllm_chat_app_production'
    # psql -U rubyllm_chat_app -l | grep rubyllm_chat_app_production


rails-console-prod:
    rails c -e production


migrate-gone-wrong:
    # For CreateMessages (basic column types)
    rails generate migration CreateMessages chat:references role:string content:text model_id:string input_tokens:integer output_tokens:integer tool_call:references

    # For CreateToolCalls (basic column types)
    rails generate migration CreateToolCalls message:references tool_call_id:string name:string arguments:jsonb

test-chat-creation:
    echo 'chat = Chat.last ;  chat.ask("testing monkeypatch with normal ask()")' | rails c
test-chat-creation-ask2:
    echo 'chat = Chat.last ; chat.ask2("testing monkeypatch with Riccardo ask2. Note for PRY you need to call manually from rails c.")' | rails c

# lets just test that Gemini works..
test-gemini:
    echo 'chat = RubyLLM.chat ; chat.ask "Are you an LLM? Who built you? Whats your cutoff time?"' | rails c

# Autorenames chats with Gemini..
chat-autorename:
    echo Chat.autotitle_if_needed | DATABASE_URL=$DATABASE_URL_DEV  rails c


# docker build
docker-build:
    time docker build -t r8tc .
    echo done. Look at the time it took.

docker-run:
    docker run -it -p 8080:8080 r8tc
